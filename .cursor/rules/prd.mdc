---
description: Product Requirements Document
globs: 
alwaysApply: true
---
# Rules

- Do one phase at a time. Never start another phase until the current one is complete. We can perform steps within a phase in parallel.
- Pay careful attention to the Rules of each phase - do not ignore them

# Features


### 1. Restaurant Discovery

- Filterable list with restaurant cards
- Display key restaurant information:
	- Photo
	- Name, cuisine type, price range, rating
	- Distance from your location
	- Google Maps link for easy navigation
- Simple filtering options:
	- Filter with buttons
	- Distance (1mi, 2mi, 5mi, 10mi)
	- Rating (above 1, 2, 3, or 4)
	- Price range (all, $, $$, $$$ or $$$$)
- Sort list by desc number of attendees

### 2. Attendee Coordination

- "Join dinner" button for each restaurant
- Display real-time count of attendees going to each place
- Once attending a dinner group
	- you can leave the dinner group
	- you can only be a part of one dinner group at a time

# Implementation


## Phase 1 - Project Setup

1. Pull the latest Epic Stack with `npx create-epic-app@latest`
2. Add required API Keys for Google and Resend
	1. Add required placeholders to .env.example
	2. Add required placeholders to .env
	3. Update env.server so the env var types are correct
	4. Ask me to add the real keys to .env, and then deploy them to Fly with `fly secrets set`

## Phase 2 - Database

1. Add db models
	- **Restaurants** (cached from API):
		- id, name, address, cuisineType, priceLevel, rating, lat, lng, photoUrl, mapsUrl
	- **DinnerGroups**:
		- id, restaurantId, notes, createdAt
	- **Attendees**:
		- id, userId, dinnerGroupId, createdAt
2. Run the migrations
3. Run `npx prisma db seed` (don't edit the seed file, just run it)

## Phase 3 - APIs

1. Implement the APIs described in #API Details

## Phase 4 - UI Components

1. Add required UI Components. shadcn/ui is already installed, just add missing components with `npx shadcn@latest`
	- Rules:
		- Update all new components that have `#app/lib/utils` imports to be `#app/utils/misc.tsx`
		- Install `lucide-react` for icons

## Phase 5 - UI Routes

1. Add UI routes
	- Rules:
		- Use `react-router` imports - DO NOT USE ANY `@remix-run/*`  or `react-router-dom` imports
		- DO NOT use a `json({})` wrapper for server function responses. Just return the object directly.
		- DO NOT use client side state or fetching, rather:

			- Manage state with server side loaders and actions

			- Use `useFetcher()` for smaller UI updates


		- Use loading states and optimistic UI with suspense and promise responses from the server

			- rollback on error

			- show pending state until confirmed


	- Routes
		1. `routes/users+/$username_+/restaurants`

			- the loader should fetch nearby restaurants to Hilton Salt Lake City based on filters

				- filters should be URL search params

			- the action should handle joining and leaving restaurants

				- upsert the restaurant in the db first before joining it

			- use Fetchers to trigger joining and leaving restaurants

			- the user should be able to navigate here using the nav dropdown (use a magnifying glass icon)

# Phase 6 - Deployment

1. Push to GitHub to deploy
2. Connect to custom domain
	- Domain is dinnernotonyourown.com
	- Domain is provided by CloudFlare
	- We need to add A, AAAA, CNAME and Acme challenge records
	- Set up the root domain and the @www. subdomain
	- Use `fly certs` instead of `fly domainit is deprecated)

# API Details


### Resend

- this is set up already
- we need to update the domain in `utils/email.server`

### Google Places

- Lives in `utils/providers/google-places.server.ts` 
- Two primary Google API endpoints:
	- Nearby Search: [https://maps.googleapis.com/maps/api/place/nearbysearch/json](https://maps.googleapis.com/maps/api/place/nearbysearch/json)
	- Place Details: [https://maps.googleapis.com/maps/api/place/details/json](https://maps.googleapis.com/maps/api/place/details/json)
- use the types from `@types/google.maps` 
- Support filtering by various parameters
- no caching
