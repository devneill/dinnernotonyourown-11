---
description: Product Requirements Document
globs: 
alwaysApply: true
---
# Rules

- Do one phase at a time. Never start another phase until the current one is complete. We can perform steps within a phase in parallel.
- Pay careful attention to the Rules of each phase - do not ignore them

# Features


### 1. Restaurant Discovery

- Filterable list with restaurant cards
- Display key restaurant information:
	- Photo
	- Name, price range, rating
	- Distance from your location
	- Google Maps link for easy navigation
- Simple filtering options:
	- Filter with buttons
	- Distance (within 1mi, 2mi, 5mi, 10mi) (5 mile by default)
	- Rating (above 1, 2, 3, or 4)(no filter by default)
	- Price range (less than or equal to $, $$, $$$ or $$$$)(no filter by default)
- Sort list by desc number of attendees

### 2. Attendee Coordination

- "Join dinner" button for each restaurant
- Display real-time count of attendees going to each place
- Once attending a dinner group
	- you can leave the dinner group
	- you can only be a part of one dinner group at a time

# Implementation


## Phase 1 - Project Setup

1. Pull the latest Epic Stack with `npx create-epic-app@latest`
2. Add required API Keys for Google and Resend
	1. Add required placeholders to .env.example
	2. Add required placeholders to .env
	3. Update env.server so the env var types are correct
	4. Ask me to add the real keys to .env, and then deploy them to Fly with `fly secrets set`
3. Prepare database
	1. Add db models
		- **Restaurants** (cached from API):
			- id, name, address, cuisineType, priceLevel, rating, lat, lng, photoUrl, mapsUrl
		- **DinnerGroups**:
		- id, restaurantId, notes, createdAt
		- **Attendees**:
			- id, userId, dinnerGroupId, createdAt
	2. Run the migrations
	3. Run `npx prisma db seed` (don't edit the seed file, just run it)

## Phase 2 - APIs

1. Implement the APIs described in #API Details
- Rules:
	- the api will interacted with directly from UI route server functions
	- no caching as we need to build as fast and simple as possible
	- surface google api error details in UI error boundary

## Phase 3 - UI Components

1. Add required UI Components. shadcn/ui is already installed, just add missing components with `npx shadcn@latest`
	- Rules:
		- Update all new components that have `#app/lib/utils` imports to be `#app/utils/misc.tsx`
		- Install `lucide-react` for icons

## Phase 4 - UI Routes

1. Add UI routes
	- Rules:
		- Use `react-router` imports - DO NOT USE ANY `@remix-run/*`  or `react-router-dom` imports
		- DO NOT use a `json({})` wrapper for server function responses. Just return the object directly.
		- DO NOT use client side state or fetching, rather:
			- Manage state with server side loaders and actions
			- Use `useFetcher()` for smaller UI updates
		- Use loading states and optimistic UI with suspense and promise responses from the server
			- rollback on error
			- show pending state until confirmed

	- Routes
		1. `routes/users+/$username_+/restaurants`
			- the loader should fetch nearby restaurants to Hilton Salt Lake City based on filters
				- filters should be URL search params
			- the action should handle joining and leaving restaurants
				- upsert the restaurant in the db first before joining it
			- use Fetchers to trigger joining and leaving restaurants
			- the user should be able to navigate here using the nav dropdown (use a magnifying glass icon)

# Phase 5 - Deployment

1. Push to GitHub to deploy
2. Connect to custom domain
	- Domain is dinnernotonyourown.com
	- Domain is provided by CloudFlare
	- We need to add A, AAAA, CNAME and Acme challenge records
	- Set up the root domain and the @www. subdomain
	- Use `fly certs` instead of `fly domainit is deprecated)

# API Details


### Resend

- this is set up already
- we need to update the domain in `utils/email.server`

### Google Places

- Lives in `utils/providers/google-places.server.ts` 
- use the types from `@types/google.maps` 
- has a single getNearbyRestaurants({lat, lng, radius, minRating, maxPrice}) function:
	- Uses two primary Google API endpoints:
		- Nearby Search: [https://maps.googleapis.com/maps/api/place/nearbysearch/json](mdc:https:/maps.googleapis.com/maps/api/place/nearbysearch/json)
		- Place Details: [https://maps.googleapis.com/maps/api/place/details/json](mdc:https:/maps.googleapis.com/maps/api/place/details/json)
	- Makes an initial Nearby Search request to get basic restaurant information and applies the price filter directly in the API call
    - Filters results by rating locally
	- For each restaurant found, makes a parallel request to the Place Details API to get additional information like formatted address, photos, and Maps URL
	- Transforms the data to match our database schema	
	- Returns a list of restaurants
